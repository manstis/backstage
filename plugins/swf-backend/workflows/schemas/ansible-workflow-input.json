{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "ansible-workflow",
  "required": ["url", "repoUrl", "catalogInfoUrl"],
  "type": "object",
  "properties": {
    "url": {
      "title": "Fetch URL",
      "description": "Relative path or absolute URL pointing to the directory tree to fetch",
      "type": "string"
    },
    "targetPath": {
      "title": "Target Path",
      "description": "Target path within the working directory to download the contents to. Defaults to the working directory root.",
      "type": "string"
    },
    "values": {
      "title": "Template Values",
      "description": "Values to pass on to the templating engine",
      "type": "object"
    },
    "copyWithoutRender": {
      "title": "[Deprecated] Copy Without Render",
      "description": "An array of glob patterns. Any files or directories which match are copied without being processed as templates.",
      "type": "array",
      "items": { "type": "string" }
    },
    "copyWithoutTemplating": {
      "title": "Copy Without Templating",
      "description": "An array of glob patterns. Contents of matched files or directories are copied without being processed, but paths are subject to rendering.",
      "type": "array",
      "items": { "type": "string" }
    },
    "cookiecutterCompat": {
      "title": "Cookiecutter compatibility mode",
      "description": "Enable features to maximise compatibility with templates built for fetch:cookiecutter",
      "type": "boolean"
    },
    "templateFileExtension": {
      "title": "Template File Extension",
      "description": "If set, only files with the given extension will be templated. If set to `true`, the default extension `.njk` is used.",
      "type": "boolean"
    },
    "replace": {
      "title": "Replace files",
      "description": "If set, replace files in targetPath instead of skipping existing ones.",
      "type": "boolean"
    },
    "repoUrl": {
      "title": "Repository Location",
      "description": "Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username",
      "type": "string"
    },
    "requireCodeOwnerReviews": {
      "title": "Require CODEOWNER Reviews?",
      "description": "Require an approved review in PR including files with a designated Code Owner",
      "type": "boolean"
    },
    "dismissStaleReviews": {
      "title": "Dismiss Stale Reviews",
      "description": "New reviewable commits pushed to a matching branch will dismiss pull request review approvals.",
      "type": "boolean"
    },
    "requiredStatusCheckContexts": {
      "title": "Required Status Check Contexts",
      "description": "The list of status checks to require in order to merge into this branch",
      "type": "array",
      "items": { "type": "string" }
    },
    "bypassPullRequestAllowances": {
      "title": "Bypass pull request requirements",
      "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "apps": { "type": "array", "items": { "type": "string" } },
        "users": { "type": "array", "items": { "type": "string" } },
        "teams": { "type": "array", "items": { "type": "string" } }
      }
    },
    "requiredApprovingReviewCount": {
      "title": "Required approving review count",
      "type": "number",
      "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. Defaults to 1."
    },
    "restrictions": {
      "title": "Restrict who can push to the protected branch",
      "description": "Restrict who can push to the protected branch. User, app, and team restrictions are only available for organization-owned repositories.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "apps": { "type": "array", "items": { "type": "string" } },
        "users": { "type": "array", "items": { "type": "string" } },
        "teams": { "type": "array", "items": { "type": "string" } }
      }
    },
    "requireBranchesToBeUpToDate": {
      "title": "Require Branches To Be Up To Date?",
      "description": "Require branches to be up to date before merging. The default value is 'true'",
      "type": "boolean"
    },
    "requiredConversationResolution": {
      "title": "Required Conversation Resolution",
      "description": "Requires all conversations on code to be resolved before a pull request can be merged into this branch",
      "type": "boolean"
    },
    "defaultBranch": {
      "title": "Default Branch",
      "type": "string",
      "description": "Sets the default branch on the repository. The default value is 'master'"
    },
    "protectDefaultBranch": {
      "title": "Protect Default Branch",
      "type": "boolean",
      "description": "Protect the default branch after creating the repository. The default value is 'true'"
    },
    "protectEnforceAdmins": {
      "title": "Enforce Admins On Protected Branches",
      "type": "boolean",
      "description": "Enforce admins to adhere to default branch protection. The default value is 'true'"
    },
    "gitCommitMessage": {
      "title": "Git Commit Message",
      "type": "string",
      "description": "Sets the commit message on the repository. The default value is 'initial commit'"
    },
    "gitAuthorName": {
      "title": "Default Author Name",
      "type": "string",
      "description": "Sets the default author name for the commit. The default value is 'Scaffolder'"
    },
    "gitAuthorEmail": {
      "title": "Default Author Email",
      "type": "string",
      "description": "Sets the default author email for the commit."
    },
    "sourcePath": {
      "title": "Source Path",
      "description": "Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.",
      "type": "string"
    },
    "token": {
      "title": "Authentication Token",
      "type": "string",
      "description": "The token to use for authorization to GitHub"
    },
    "requiredCommitSigning": {
      "title": "Require commit signing",
      "type": "boolean",
      "description": "Require commit signing so that you must sign commits on this branch."
    },
    "catalogInfoUrl": {
      "title": "Catalog Info URL",
      "description": "An absolute URL pointing to the catalog info file location",
      "type": "string"
    },
    "optional": {
      "title": "Optional",
      "description": "Permit the registered location to optionally exist. Default: false",
      "type": "boolean"
    }
  }
}
